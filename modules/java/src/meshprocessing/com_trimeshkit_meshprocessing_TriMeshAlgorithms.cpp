/**
 * @Date:   2017-12-20T20:42:46+00:00
 * @Last modified time: 2017-12-31T23:02:32+00:00
 */



/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_trimeshkit_meshprocessing_TriMeshAlgorithms */

#ifndef _Included_com_trimeshkit_meshprocessing_TriMeshAlgorithms
#define _Included_com_trimeshkit_meshprocessing_TriMeshAlgorithms

#include <TriMeshAlgorithms.h>
#include <TriMesh.h>
#include <NativeHandle.h>

#ifdef __cplusplus
extern "C" {
#endif
using namespace TriMeshKit::MeshProcessing;

void getSTDVectorFromJObjectArrAy(JNIEnv * _env, const jobjectArray&  _boundryPointsList,
     std::vector<std::vector<OpenMesh::Vec2d>>& triMeshBoundryLists)
{
    jsize boundryListsSize = _env->GetArrayLength(_boundryPointsList);

    for(int i = 0; i < boundryListsSize; ++i)
    {
        std::vector<OpenMesh::Vec2d> triMeshBoundryList;
        jdoubleArray boundryList= (jdoubleArray)_env->GetObjectArrayElement(_boundryPointsList, i);
        jdouble* pointsArray = _env->GetDoubleArrayElements(boundryList, 0);
        jsize pointsLength = _env->GetArrayLength(boundryList);

        for (int j=0; j<pointsLength;)
        {
            double x = pointsArray[j];
            j++;
      	    double y = pointsArray[j];
      	    j++;
      	    OpenMesh::Vec2d point(x, y);
            triMeshBoundryList.push_back(point);
        }

        triMeshBoundryLists.push_back(triMeshBoundryList);

        _env->ReleaseDoubleArrayElements(boundryList, pointsArray, 0);
    }
}

/*
 * Class:     com_trimeshkit_meshprocessing_TriMeshAlgorithms
 * Method:    smooth
 * Signature: (Lcom/trimeshkit/meshprocessing/TriMesh;)Z
 */
JNIEXPORT bool JNICALL Java_com_trimeshkit_meshprocessing_TriMeshAlgorithms_smooth
  (JNIEnv * _env, jclass _class, jobject _mesh)
  {
	  TriMesh *inst = getHandle<TriMesh>(_env, _mesh);

      return TriMeshAlgorithms::smooth( *inst);

  }

 JNIEXPORT void JNICALL Java_com_trimeshkit_meshprocessing_TriMeshAlgorithms_triangulate
 (JNIEnv * _env, jclass _class, jobject _mesh, jdoubleArray _pointList)
 {
  TriMesh *inst = getHandle<TriMesh>(_env, _mesh);

  jsize pointsLength = _env->GetArrayLength(_pointList);
  std::vector<OpenMesh::Vec2d> pointsVector;

  jdouble *_pointArray = _env->GetDoubleArrayElements(_pointList, 0);

     for (int i=0; i<pointsLength;) {
	  double x = _pointArray[i];
	  i++;
	  double y = _pointArray[i];
	  i++;
	  OpenMesh::Vec2d point(x, y);
         pointsVector.push_back(point);
     }

  std::vector<OpenMesh::Vec2ui> segmentList;

  int k;
  for(int i = 0; i < pointsVector.size(); ++i)
  {
	  k = i;
	  OpenMesh::Vec2ui segment(k, (k+1) % pointsVector.size());
	  segmentList.push_back(segment);
  }

     std::map<TriMesh::VertexHandle, int> markerMap;
     TriMeshAlgorithms::triangulate( *inst, pointsVector, segmentList, std::vector<OpenMesh::Vec2d>(),
                                   std::vector<int>(), std::vector<int>(), "a0.001q", markerMap);

  _env->ReleaseDoubleArrayElements(_pointList, _pointArray, 0);
 }

 JNIEXPORT void JNICALL Java_com_trimeshkit_meshprocessing_TriMeshAlgorithms_bendSketch
 (JNIEnv * _env, jclass _class, jobject _mesh, jobjectArray  _boundryPointsList,
  jobjectArray  _convexPointsList, jobjectArray _concavePointsList,
  jobjectArray  _ridgePointsList, jobjectArray _valleyPointsList)
 {
  TriMesh *inst = getHandle<TriMesh>(_env, _mesh);

  // Boundray
  std::vector<std::vector<OpenMesh::Vec2d>> triMeshBoundryLists;
  getSTDVectorFromJObjectArrAy(_env, _boundryPointsList, triMeshBoundryLists);

  // Convex
  std::vector<std::vector<OpenMesh::Vec2d>> triMeshConvexLists;
  getSTDVectorFromJObjectArrAy(_env, _convexPointsList, triMeshConvexLists);

  // concave
  std::vector<std::vector<OpenMesh::Vec2d>> triMeshConcaveLists;
  getSTDVectorFromJObjectArrAy(_env, _concavePointsList, triMeshConcaveLists);

  // Ridge
  std::vector<std::vector<OpenMesh::Vec2d>> triMeshRidgeLists;
  getSTDVectorFromJObjectArrAy(_env, _ridgePointsList, triMeshRidgeLists);

  // Valley
  std::vector<std::vector<OpenMesh::Vec2d>> triMeshValleyLists;
  getSTDVectorFromJObjectArrAy(_env, _valleyPointsList, triMeshValleyLists);

  TriMeshAlgorithms::bendSketch( *inst, triMeshBoundryLists, triMeshConvexLists, triMeshConcaveLists,
      triMeshRidgeLists, triMeshValleyLists);
 }

#ifdef __cplusplus
}
#endif
#endif
