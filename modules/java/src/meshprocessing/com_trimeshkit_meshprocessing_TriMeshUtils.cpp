/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_trimeshkit_meshprocessing_TriMeshUtils */

#ifndef _Included_com_trimeshkit_meshprocessing_TriMeshUtils
#define _Included_com_trimeshkit_meshprocessing_TriMeshUtils

#include <TriMeshUtils.h>
#include <TriMesh.h>
#include <NativeHandle.h>

#ifdef __cplusplus
extern "C" {
#endif
using namespace TriMeshKit::MeshProcessing;

/*
 * Class:     com_trimeshkit_meshprocessing_TriMeshUtils
 * Method:    readMesh
 * Signature: (Lcom/trimeshkit/meshprocessing/TriMesh;Ljava/lang/String;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_com_trimeshkit_meshprocessing_TriMeshUtils_readMesh
  (JNIEnv * _env, jclass _class, jobject _mesh, jstring _path, jboolean _requestNormals)
  {
	  TriMesh *inst = getHandle<TriMesh>(_env, _mesh);
	  const char *nativeString = _env->GetStringUTFChars( _path, 0);

      auto result = TriMeshUtils::readMesh( *inst, nativeString, _requestNormals);

      _env->ReleaseStringUTFChars(_path, nativeString);

      return result;
  }

/*
 * Class:     com_trimeshkit_meshprocessing_TriMeshUtils
 * Method:    writeMesh
 * Signature: (Lcom/trimeshkit/meshprocessing/TriMesh;Ljava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_com_trimeshkit_meshprocessing_TriMeshUtils_writeMesh
  (JNIEnv * _env, jclass _class, jobject _mesh, jstring _path, jboolean _binary)
  {
	  TriMesh *inst = getHandle<TriMesh>(_env, _mesh);
	  const char *nativeString = _env->GetStringUTFChars( _path, 0);

      TriMeshUtils::writeMesh( *inst, nativeString, _binary);

      _env->ReleaseStringUTFChars(_path, nativeString);
  }

#ifdef __cplusplus
}
#endif
#endif
